using De.Osthus.Ambeth.Log;
using System;
using De.Osthus.Ambeth.Ioc.Config;
using System.Reflection;
using De.Osthus.Ambeth.Util;
using De.Osthus.Ambeth.Ioc.Extendable;

namespace De.Osthus.Ambeth.Ioc.Link
{
    [Obsolete]
    public class PropertyChangedLinkContainerOld : AbstractLinkContainerOld
    {
        [LogInstance]
		public new ILogger Log { private get; set; }

        public IExtendableRegistry ExtendableRegistry { get; set; }

        public String PropertyName { get; set; }

        public String MethodName { get; set; }

        protected MethodInfo removeMethod;

        public override void AfterPropertiesSet()
        {
            base.AfterPropertiesSet();

            ParamChecker.AssertParamNotNull(ExtendableRegistry, "ExtendableRegistry");
            ParamChecker.AssertParamNotNull(PropertyName, PropertyName);
        }

        protected override Object resolveListenerIntern(Object listener)
        {
            listener = base.resolveListenerIntern(listener);

            if (MethodName == null)
            {
                return listener;
            }
            // MethodInfo listenerMethod = listener.GetType().GetMethod(MethodName);
            Object[] linkArguments;
            MethodInfo[] methods = ExtendableRegistry.GetAddRemoveMethods(resolvedRegistry.GetType(), PropertyName, Arguments, out linkArguments);
            Arguments = linkArguments;
            // An autogenerated event "add" method has always exactly 1 argument
            ParameterInfo delegateParam = methods[0].GetParameters()[0];
            return Delegate.CreateDelegate(delegateParam.ParameterType, listener, MethodName);
        }

        protected override void HandleLink(Object registry, Object listener, Object[] args)
        {
            Object[] linkArguments;
            MethodInfo[] methods = ExtendableRegistry.GetAddRemoveMethods(registry.GetType(), PropertyName, Arguments, out linkArguments);
            Arguments = linkArguments;

            args[0] = listener;
            methods[0].Invoke(registry, args);

            args[0] = null; // Clear reference (potential) garbage here

            removeMethod = methods[1];
        }

        protected override void HandleUnlink(Object registry, Object listener, Object[] args)
        {
            args[0] = listener;
            removeMethod.Invoke(registry, args);
        }
    }
}
