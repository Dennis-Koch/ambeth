package de.osthus.ambeth.persistence.streaming;import org.junit.Assert;import org.junit.Test;import de.osthus.ambeth.cache.CacheRetrieverFake;import de.osthus.ambeth.cache.ICache;import de.osthus.ambeth.cache.InputSourceTemplateFake;import de.osthus.ambeth.cache.InputSourceTemplateFakeConverter;import de.osthus.ambeth.cache.transfer.LoadContainer;import de.osthus.ambeth.event.EntityMetaDataAddedEvent;import de.osthus.ambeth.event.IEventListenerExtendable;import de.osthus.ambeth.ioc.BytecodeModule;import de.osthus.ambeth.ioc.CacheBytecodeModule;import de.osthus.ambeth.ioc.CacheDataChangeModule;import de.osthus.ambeth.ioc.CacheModule;import de.osthus.ambeth.ioc.CacheStreamModule;import de.osthus.ambeth.ioc.CompositeIdModule;import de.osthus.ambeth.ioc.EventDataChangeModule;import de.osthus.ambeth.ioc.EventModule;import de.osthus.ambeth.ioc.EventServerModule;import de.osthus.ambeth.ioc.IInitializingModule;import de.osthus.ambeth.ioc.MergeModule;import de.osthus.ambeth.ioc.ObjectCopierModule;import de.osthus.ambeth.ioc.ServiceModule;import de.osthus.ambeth.ioc.StreamModule;import de.osthus.ambeth.ioc.annotation.Autowired;import de.osthus.ambeth.ioc.annotation.FrameworkModule;import de.osthus.ambeth.ioc.config.IBeanConfiguration;import de.osthus.ambeth.ioc.extendable.ExtendableBean;import de.osthus.ambeth.ioc.factory.IBeanContextFactory;import de.osthus.ambeth.merge.IEntityFactory;import de.osthus.ambeth.merge.IEntityMetaDataExtendable;import de.osthus.ambeth.merge.IEntityMetaDataProvider;import de.osthus.ambeth.merge.IValueObjectConfigExtendable;import de.osthus.ambeth.merge.IndependentEntityMetaDataClient;import de.osthus.ambeth.merge.MergeServiceRegistry;import de.osthus.ambeth.merge.NoopMergeService;import de.osthus.ambeth.merge.ValueObjectMap;import de.osthus.ambeth.merge.config.IndependentEntityMetaDataReader;import de.osthus.ambeth.merge.config.ValueObjectConfigReader;import de.osthus.ambeth.merge.model.IEntityMetaData;import de.osthus.ambeth.merge.model.IObjRef;import de.osthus.ambeth.merge.transfer.ObjRef;import de.osthus.ambeth.orm.IOrmXmlReaderExtendable;import de.osthus.ambeth.orm.IOrmXmlReaderRegistry;import de.osthus.ambeth.orm.OrmXmlReader20;import de.osthus.ambeth.orm.OrmXmlReaderLegathy;import de.osthus.ambeth.persistence.streaming.StreamingEntityTest.StreamingEntityTestModule;import de.osthus.ambeth.service.ICacheRetriever;import de.osthus.ambeth.service.IMergeService;import de.osthus.ambeth.service.IMergeServiceExtendable;import de.osthus.ambeth.service.config.ConfigurationConstants;import de.osthus.ambeth.stream.binary.IBinaryInputStream;import de.osthus.ambeth.stream.bool.IBooleanInputStream;import de.osthus.ambeth.stream.float32.IFloatInputStream;import de.osthus.ambeth.stream.float64.IDoubleInputStream;import de.osthus.ambeth.stream.int32.IIntInputStream;import de.osthus.ambeth.stream.int64.ILongInputStream;import de.osthus.ambeth.stream.strings.IStringInputStream;import de.osthus.ambeth.testutil.AbstractIocTest;import de.osthus.ambeth.testutil.TestFrameworkModule;import de.osthus.ambeth.testutil.TestProperties;import de.osthus.ambeth.testutil.TestRebuildContext;import de.osthus.ambeth.typeinfo.IRelationProvider;import de.osthus.ambeth.typeinfo.RelationProvider;import de.osthus.ambeth.util.IDedicatedConverterExtendable;import de.osthus.ambeth.util.XmlConfigUtil;import de.osthus.ambeth.util.xml.IXmlConfigUtil;@TestProperties(name = ConfigurationConstants.mappingFile, value = "de/osthus/ambeth/persistence/streaming/streaming_orm.xml")@TestFrameworkModule({ StreamingEntityTestModule.class, BytecodeModule.class, CacheModule.class, CacheBytecodeModule.class, CacheDataChangeModule.class,		CacheStreamModule.class, CompositeIdModule.class, EventModule.class, EventServerModule.class, EventDataChangeModule.class, MergeModule.class,		ObjectCopierModule.class, ServiceModule.class, StreamModule.class })@TestRebuildContextpublic class StreamingEntityTest extends AbstractIocTest{	@FrameworkModule	public static class StreamingEntityTestModule implements IInitializingModule	{		@Override		public void afterPropertiesSet(IBeanContextFactory beanContextFactory) throws Throwable		{			beanContextFactory.registerBean(CacheModule.DEFAULT_CACHE_RETRIEVER, CacheRetrieverFake.class).autowireable(ICacheRetriever.class);			beanContextFactory.registerAlias(CacheStreamModule.CHUNK_PROVIDER_NAME, CacheModule.DEFAULT_CACHE_RETRIEVER);			IBeanConfiguration istfConverter = beanContextFactory.registerAnonymousBean(InputSourceTemplateFakeConverter.class);			beanContextFactory.link(istfConverter).to(IDedicatedConverterExtendable.class).with(InputSourceTemplateFake.class, IBinaryInputStream.class);			IBeanConfiguration valueObjectMap = beanContextFactory.registerAnonymousBean(ValueObjectMap.class);			beanContextFactory.registerBean("independantMetaDataProvider", IndependentEntityMetaDataClient.class).propertyRef("ValueObjectMap", valueObjectMap)					.autowireable(IEntityMetaDataProvider.class, IValueObjectConfigExtendable.class, IEntityMetaDataExtendable.class);			beanContextFactory.registerBean("valueObjectConfigReader", ValueObjectConfigReader.class);			beanContextFactory.link("valueObjectConfigReader").to(IEventListenerExtendable.class).with(EntityMetaDataAddedEvent.class);			beanContextFactory.registerBean("ormXmlReader", ExtendableBean.class).propertyValue(ExtendableBean.P_PROVIDER_TYPE, IOrmXmlReaderRegistry.class)					.propertyValue(ExtendableBean.P_EXTENDABLE_TYPE, IOrmXmlReaderExtendable.class)					.propertyRef(ExtendableBean.P_DEFAULT_BEAN, "ormXmlReaderLegathy").autowireable(IOrmXmlReaderRegistry.class, IOrmXmlReaderExtendable.class);			beanContextFactory.registerBean("ormXmlReaderLegathy", OrmXmlReaderLegathy.class);			beanContextFactory.registerBean("ormXmlReader 2.0", OrmXmlReader20.class);			beanContextFactory.link("ormXmlReader 2.0").to(IOrmXmlReaderExtendable.class).with(OrmXmlReader20.ORM_XML_NS);			beanContextFactory.registerBean("xmlConfigUtil", XmlConfigUtil.class).autowireable(IXmlConfigUtil.class);			beanContextFactory.registerBean("relationProvider", RelationProvider.class).autowireable(IRelationProvider.class);			beanContextFactory.registerBean(MergeModule.INDEPENDENT_META_DATA_READER, IndependentEntityMetaDataReader.class);			beanContextFactory.registerBean("mergeService", NoopMergeService.class);			beanContextFactory.registerBean("mergeServiceRegistry", MergeServiceRegistry.class).propertyRefs("mergeService")					.autowireable(IMergeService.class, IMergeServiceExtendable.class);		}	}	@Autowired	protected ICache cache;	@Autowired	protected IEntityFactory entityFactory;	@Autowired	protected IEntityMetaDataProvider entityMetaDataProvider;	@Test	public void streamedBoolean() throws Exception	{		IEntityMetaData metaData = entityMetaDataProvider.getMetaData(StreamingEntity.class);		CacheRetrieverFake cacheRetrieverFake = beanContext.getService(CacheModule.DEFAULT_CACHE_RETRIEVER, CacheRetrieverFake.class);		LoadContainer lc = new LoadContainer();		ObjRef objRef = new ObjRef(StreamingEntity.class, new Integer(1), null);		lc.setReference(objRef);		boolean[] expected = { true, false, true, true, false };		lc.setPrimitives(new Object[metaData.getPrimitiveMembers().length]);		lc.setRelations(new IObjRef[metaData.getRelationMembers().length][]);		lc.getPrimitives()[metaData.getIndexByPrimitiveName("BooleanStreamed")] = new InputSourceTemplateFake(expected);		cacheRetrieverFake.entities.put(lc.getReference(), lc);		StreamingEntity streamingEntity = cache.getObject(StreamingEntity.class, 1);		IBooleanInputStream is = streamingEntity.getBooleanStreamed().deriveBooleanInputStream();		try		{			int index = 0;			while (is.hasBoolean())			{				boolean value = is.readBoolean();				Assert.assertEquals(expected[index++], value);			}		}		finally		{			is.close();		}		Assert.assertNotNull(streamingEntity);	}	@Test	public void streamedDouble() throws Exception	{		IEntityMetaData metaData = entityMetaDataProvider.getMetaData(StreamingEntity.class);		CacheRetrieverFake cacheRetrieverFake = beanContext.getService(CacheModule.DEFAULT_CACHE_RETRIEVER, CacheRetrieverFake.class);		LoadContainer lc = new LoadContainer();		ObjRef objRef = new ObjRef(StreamingEntity.class, new Integer(1), null);		lc.setReference(objRef);		double[] expected = { 5, 4, Double.MAX_VALUE, Double.MIN_VALUE, 0, -1, 5.4321 };		lc.setPrimitives(new Object[metaData.getPrimitiveMembers().length]);		lc.setRelations(new IObjRef[metaData.getRelationMembers().length][]);		lc.getPrimitives()[metaData.getIndexByPrimitiveName("DoubleStreamed")] = new InputSourceTemplateFake(expected);		cacheRetrieverFake.entities.put(lc.getReference(), lc);		StreamingEntity streamingEntity = cache.getObject(StreamingEntity.class, 1);		IDoubleInputStream is = streamingEntity.getDoubleStreamed().deriveDoubleInputStream();		try		{			int index = 0;			while (is.hasDouble())			{				double value = is.readDouble();				Assert.assertEquals(expected[index++], value, Double.MIN_VALUE);			}		}		finally		{			is.close();		}		Assert.assertNotNull(streamingEntity);	}	@Test	public void streamedFloat() throws Exception	{		IEntityMetaData metaData = entityMetaDataProvider.getMetaData(StreamingEntity.class);		CacheRetrieverFake cacheRetrieverFake = beanContext.getService(CacheModule.DEFAULT_CACHE_RETRIEVER, CacheRetrieverFake.class);		LoadContainer lc = new LoadContainer();		ObjRef objRef = new ObjRef(StreamingEntity.class, new Integer(1), null);		lc.setReference(objRef);		float[] expected = { 5, 4, Float.MAX_VALUE, Float.MIN_VALUE, 0, -1, 5.4321f };		lc.setPrimitives(new Object[metaData.getPrimitiveMembers().length]);		lc.setRelations(new IObjRef[metaData.getRelationMembers().length][]);		lc.getPrimitives()[metaData.getIndexByPrimitiveName("FloatStreamed")] = new InputSourceTemplateFake(expected);		cacheRetrieverFake.entities.put(lc.getReference(), lc);		StreamingEntity streamingEntity = cache.getObject(StreamingEntity.class, 1);		IFloatInputStream is = streamingEntity.getFloatStreamed().deriveFloatInputStream();		try		{			int index = 0;			while (is.hasFloat())			{				float value = is.readFloat();				Assert.assertEquals(expected[index++], value, Float.MIN_VALUE);			}		}		finally		{			is.close();		}		Assert.assertNotNull(streamingEntity);	}	@Test	public void streamedInt() throws Exception	{		IEntityMetaData metaData = entityMetaDataProvider.getMetaData(StreamingEntity.class);		CacheRetrieverFake cacheRetrieverFake = beanContext.getService(CacheModule.DEFAULT_CACHE_RETRIEVER, CacheRetrieverFake.class);		LoadContainer lc = new LoadContainer();		ObjRef objRef = new ObjRef(StreamingEntity.class, new Integer(1), null);		lc.setReference(objRef);		int[] expected = { 5, 4, Integer.MAX_VALUE, Integer.MIN_VALUE, 0, -1 };		lc.setPrimitives(new Object[metaData.getPrimitiveMembers().length]);		lc.setRelations(new IObjRef[metaData.getRelationMembers().length][]);		lc.getPrimitives()[metaData.getIndexByPrimitiveName("IntStreamed")] = new InputSourceTemplateFake(expected);		cacheRetrieverFake.entities.put(lc.getReference(), lc);		StreamingEntity streamingEntity = cache.getObject(StreamingEntity.class, 1);		IIntInputStream is = streamingEntity.getIntStreamed().deriveIntInputStream();		try		{			int index = 0;			while (is.hasInt())			{				int value = is.readInt();				Assert.assertEquals(expected[index++], value);			}		}		finally		{			is.close();		}		Assert.assertNotNull(streamingEntity);	}	@Test	public void streamedLong() throws Exception	{		IEntityMetaData metaData = entityMetaDataProvider.getMetaData(StreamingEntity.class);		CacheRetrieverFake cacheRetrieverFake = beanContext.getService(CacheModule.DEFAULT_CACHE_RETRIEVER, CacheRetrieverFake.class);		LoadContainer lc = new LoadContainer();		ObjRef objRef = new ObjRef(StreamingEntity.class, new Integer(1), null);		lc.setReference(objRef);		long[] expected = { 5, 4, Long.MAX_VALUE, Long.MIN_VALUE, 0, -1 };		lc.setPrimitives(new Object[metaData.getPrimitiveMembers().length]);		lc.setRelations(new IObjRef[metaData.getRelationMembers().length][]);		lc.getPrimitives()[metaData.getIndexByPrimitiveName("LongStreamed")] = new InputSourceTemplateFake(expected);		cacheRetrieverFake.entities.put(lc.getReference(), lc);		StreamingEntity streamingEntity = cache.getObject(StreamingEntity.class, 1);		ILongInputStream is = streamingEntity.getLongStreamed().deriveLongInputStream();		try		{			int index = 0;			while (is.hasLong())			{				long value = is.readLong();				Assert.assertEquals(expected[index++], value);			}		}		finally		{			is.close();		}		Assert.assertNotNull(streamingEntity);	}	@Test	public void streamedString() throws Exception	{		IEntityMetaData metaData = entityMetaDataProvider.getMetaData(StreamingEntity.class);		CacheRetrieverFake cacheRetrieverFake = beanContext.getService(CacheModule.DEFAULT_CACHE_RETRIEVER, CacheRetrieverFake.class);		LoadContainer lc = new LoadContainer();		ObjRef objRef = new ObjRef(StreamingEntity.class, new Integer(1), null);		lc.setReference(objRef);		String[] expected = { Integer.toString(5), Integer.toString(4), Integer.toString(Integer.MAX_VALUE), null, Integer.toString(Integer.MAX_VALUE),				Integer.toString(0), Integer.toString(-1) };		lc.setPrimitives(new Object[metaData.getPrimitiveMembers().length]);		lc.setRelations(new IObjRef[metaData.getRelationMembers().length][]);		lc.getPrimitives()[metaData.getIndexByPrimitiveName("StringStreamed")] = new InputSourceTemplateFake(expected);		cacheRetrieverFake.entities.put(lc.getReference(), lc);		StreamingEntity streamingEntity = cache.getObject(StreamingEntity.class, 1);		IStringInputStream is = streamingEntity.getStringStreamed().deriveStringInputStream();		try		{			int index = 0;			while (is.hasString())			{				String value = is.readString();				Assert.assertEquals(expected[index++], value);			}		}		finally		{			is.close();		}		Assert.assertNotNull(streamingEntity);	}}