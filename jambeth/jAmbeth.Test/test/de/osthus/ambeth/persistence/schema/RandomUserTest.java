package de.osthus.ambeth.persistence.schema;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNotNull;import static org.junit.Assert.assertNull;import java.util.List;import org.junit.AfterClass;import org.junit.BeforeClass;import org.junit.Ignore;import org.junit.Test;import org.junit.runner.RunWith;import de.osthus.ambeth.cache.ICache;import de.osthus.ambeth.exception.RuntimeExceptionUtil;import de.osthus.ambeth.persistence.jdbc.config.PersistenceJdbcConfigurationConstants;import de.osthus.ambeth.persistence.schema.models.IParentAService;import de.osthus.ambeth.persistence.schema.models.IParentBService;import de.osthus.ambeth.persistence.schema.models.ParentA;import de.osthus.ambeth.persistence.schema.models.ParentB;import de.osthus.ambeth.query.IQuery;import de.osthus.ambeth.query.IQueryBuilder;import de.osthus.ambeth.query.IQueryBuilderFactory;import de.osthus.ambeth.service.config.ConfigurationConstants;import de.osthus.ambeth.testutil.AbstractPersistenceTest;import de.osthus.ambeth.testutil.NewAmbethPersistenceRunner;import de.osthus.ambeth.testutil.RandomUserScript;import de.osthus.ambeth.testutil.SQLData;import de.osthus.ambeth.testutil.SQLStructure;import de.osthus.ambeth.testutil.TestModule;import de.osthus.ambeth.testutil.TestProperties;import de.osthus.ambeth.testutil.TestPropertiesList;import de.osthus.ambeth.util.ParamChecker;/** * Tests the replacement of the JAMBETH user by a temporary user created by the RandomUserScript. Because this is also done by the Jenkins build script this * test won't run in the Jenkins environment. Therefore the test methods are disabled. * <p> * This test will test the replacement of multiple schema place holders in ORM, query builder and test data insert scripts . */@TestModule({ MultiSchemaTestModule.class })@TestPropertiesList({ @TestProperties(file = "random_user_test.properties"),		@TestProperties(name = PersistenceJdbcConfigurationConstants.DatabaseBehaviourStrict, value = "true"),		@TestProperties(name = ConfigurationConstants.mappingFile, value = "de/osthus/ambeth/persistence/schema/random_user_orm.xml") })@SQLStructure("random_user_structure.sql")@SQLData("random_user_data.sql")@RunWith(NewAmbethPersistenceRunner.class)@Ignore("Does not work in JENKINS")public class RandomUserTest extends AbstractPersistenceTest{	private static final String RANDOM_USER_TEST_PROPERTIES = "random_user_test.properties";	private ICache cache;	private IQueryBuilderFactory qbf;	private IParentAService parentAService;	private IParentBService parentBService;	@Override	public void afterPropertiesSet() throws Throwable	{		super.afterPropertiesSet();		ParamChecker.assertNotNull(cache, "cache");		ParamChecker.assertNotNull(qbf, "qbf");		ParamChecker.assertNotNull(parentAService, "parentAService");		ParamChecker.assertNotNull(parentBService, "parentBService");	}	@BeforeClass	public static void beforeClass()	{		String[] args = new String[] { RandomUserScript.SCRIPT_IS_CREATE + "=true", RandomUserScript.SCRIPT_USER_PASS + "=pw1,pw2",				RandomUserScript.SCRIPT_USER_PROPERTYFILE + "=" + RANDOM_USER_TEST_PROPERTIES };		runRandomUserScript(args);	}	@AfterClass	public static void afterClass()	{		String[] args = new String[] { RandomUserScript.SCRIPT_IS_CREATE + "=false",				RandomUserScript.SCRIPT_USER_PROPERTYFILE + "=" + RANDOM_USER_TEST_PROPERTIES };		runRandomUserScript(args);	}	private static void runRandomUserScript(String[] args)	{		try		{			RandomUserScript.main(args);		}		catch (Throwable e)		{			throw RuntimeExceptionUtil.mask(e);		}	}	public void setCache(ICache cache)	{		this.cache = cache;	}	public void setQbf(IQueryBuilderFactory qbf)	{		this.qbf = qbf;	}	public void setParentAService(IParentAService parentAService)	{		this.parentAService = parentAService;	}	public void setParentBService(IParentBService parentBService)	{		this.parentBService = parentBService;	}	@Test	public void testDeleteA() throws Exception	{		ParentA parent = cache.getObject(ParentA.class, 1);		assertNotNull(parent);		parentAService.delete(parent);		ParentA actual = cache.getObject(ParentA.class, 1);		assertNull(actual);	}	@Test	public void testDeleteB() throws Exception	{		ParentB parent = cache.getObject(ParentB.class, 101);		assertNotNull(parent);		parentBService.delete(parent);		ParentB actual = cache.getObject(ParentB.class, 101);		assertNull(actual);	}	@Test	public void testQueryA() throws Exception	{		IQueryBuilder<ParentA> qb = qbf.create(ParentA.class);		IQuery<ParentA> query = qb.build(qb.isEqualTo(qb.property("Child.Id"), qb.value(11)));		List<ParentA> result = query.retrieve();		assertEquals(1, result.size());		ParentA actual = result.get(0);		assertEquals(1, actual.getId());		assertEquals(11, actual.getChild().getId());	}	@Test	public void testQueryB() throws Exception	{		IQueryBuilder<ParentB> qb = qbf.create(ParentB.class);		IQuery<ParentB> query = qb.build(qb.isEqualTo(qb.property("Child.Id"), qb.value(111)));		List<ParentB> result = query.retrieve();		assertEquals(1, result.size());		ParentB actual = result.get(0);		assertEquals(101, actual.getId());		assertEquals(111, actual.getChild().getId());	}}